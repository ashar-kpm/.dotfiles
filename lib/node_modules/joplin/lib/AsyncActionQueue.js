"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class AsyncActionQueue {
    constructor(interval = 100) {
        this.queue_ = [];
        this.scheduleProcessingIID_ = null;
        this.processing_ = false;
        this.needProcessing_ = false;
        this.interval_ = interval;
    }
    push(action, context = null) {
        this.queue_.push({
            action: action,
            context: context,
        });
        this.scheduleProcessing();
    }
    get queue() {
        return this.queue_;
    }
    scheduleProcessing(interval = null) {
        if (interval === null)
            interval = this.interval_;
        if (this.scheduleProcessingIID_) {
            clearTimeout(this.scheduleProcessingIID_);
        }
        this.scheduleProcessingIID_ = setTimeout(() => {
            this.scheduleProcessingIID_ = null;
            this.processQueue();
        }, interval);
    }
    processQueue() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.processing_) {
                this.scheduleProcessing();
                return;
            }
            this.processing_ = true;
            const itemCount = this.queue_.length;
            if (itemCount) {
                const item = this.queue_[itemCount - 1];
                yield item.action();
                this.queue_.splice(0, itemCount);
            }
            this.processing_ = false;
        });
    }
    waitForAllDone() {
        this.scheduleProcessing(1);
        return new Promise((resolve) => {
            const iid = setInterval(() => {
                if (this.processing_)
                    return;
                if (!this.queue_.length) {
                    clearInterval(iid);
                    resolve();
                }
            }, 100);
        });
    }
}
exports.default = AsyncActionQueue;
//# sourceMappingURL=AsyncActionQueue.js.map